---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import About from '../components/About.astro';
import Skills from '../components/Skills.astro';
import Contact from '../components/Contact.astro';
import Projects from '../components/Projects.astro';
import Experience from '../components/Experience.astro';
import Welcome from '../components/Welcome.astro';

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<Layout>
	<div class="min-h-screen bg-[#16161e] overflow-hidden">
		<!-- Mobile Version -->
		<div class="block sm:hidden min-h-screen bg-[#1a1b26] text-[#c0caf5] overflow-y-auto">
			<div class="p-4 pb-20 space-y-8">
				<!-- Mobile Header -->
				<div class="text-center space-y-4">
				<Header />
					<div class="text-sm text-[#565f89]">Associate DevOps Engineer</div>
				</div>

				<!-- About Section -->
				<div class="space-y-2">
					<h2 class="text-[#bb9af7] text-lg font-bold">About Me</h2>
				<About />
				</div>

				<!-- Skills Section -->
				<div class="space-y-2">
					<h2 class="text-[#bb9af7] text-lg font-bold">Skills</h2>
				<Skills />
				</div>

				<!-- Projects Section -->
				<div class="space-y-2">
					<h2 class="text-[#bb9af7] text-lg font-bold">Projects</h2>
					<Projects />
				</div>

				<!-- Experience Section -->
				<div class="space-y-2">
					<h2 class="text-[#bb9af7] text-lg font-bold">Experience</h2>
					<Experience />
				</div>

				<!-- Contact Section -->
				<div class="space-y-2">
					<h2 class="text-[#bb9af7] text-lg font-bold">Contact</h2>
				<Contact />
			</div>

				<!-- Mobile Footer -->
				<div class="fixed bottom-0 left-0 right-0 bg-[#1a1b26] py-4 border-t border-[#565f89]/20">
					<p class="text-[10px] text-[#7aa2f7]">Made with <span class="text-[#f7768e]">‚ù§</span> by DFanso</p>
					<p class="text-[10px] text-[#565f89] mt-2">For the full terminal experience, please visit on desktop</p>
				</div>
			</div>
		</div>

		<!-- Desktop Terminal Version -->
		<div class="hidden sm:flex items-center justify-center min-h-screen p-4">
			<div class="terminal-container w-full max-w-6xl shadow-2xl border border-[#7aa2f7]/20 rounded overflow-hidden">
				<!-- Mobile Notice -->
				<div class="sm:hidden bg-[#1a1b26] border border-[#f7768e] rounded-lg p-3 mb-4 text-center">
					<p class="text-[#f7768e] text-sm">‚ö†Ô∏è For the best terminal experience, please use a desktop browser.</p>
				</div>

				<!-- Terminal Header -->
				<div class="terminal-title-bar">
					<div class="terminal-buttons">
						<span class="terminal-button bg-[#f7768e]"></span>
						<span class="terminal-button bg-[#e0af68]"></span>
						<span class="terminal-button bg-[#9ece6a]"></span>
					</div>
					<div class="terminal-title">guest@dfanso.dev:~</div>
				</div>

				<!-- Terminal Content -->
				<div id="terminal" class="terminal-content-area">
					<div id="output-container">
						<!-- Welcome message -->
						<div class="command-block">
							<div class="command-prompt"><span class="text-[#9ece6a]">‚ùØ</span> <span class="text-[#7aa2f7]">dfanso</span><span class="text-[#565f89]">@</span><span class="text-[#bb9af7]">terminal</span> <span class="text-[#565f89]">in</span> <span class="text-[#e0af68]">~/portfolio</span> <span class="text-[#565f89]">on</span> <span class="text-[#f7768e]">main</span></div>
							<div class="command-output"><Welcome /></div>
						</div>

						<!-- Whoami command -->
						<div class="command-block">
							<div class="command-prompt"><span class="text-[#9ece6a]">‚ùØ</span> <span class="text-[#7aa2f7]">dfanso</span><span class="text-[#565f89]">@</span><span class="text-[#bb9af7]">terminal</span> <span class="text-[#565f89]">in</span> <span class="text-[#e0af68]">~/portfolio</span> <span class="text-[#565f89]">on</span> <span class="text-[#f7768e]">main</span></div>
							<div class="command-output"><Header /></div>
						</div>
					</div>

					<!-- Command Input -->
					<div class="command-block" id="input-line">
						<div class="command-prompt">
							<span class="text-[#9ece6a]">‚ùØ</span> <span class="text-[#7aa2f7]">dfanso</span><span class="text-[#565f89]">@</span><span class="text-[#bb9af7]">terminal</span> <span class="text-[#565f89]">in</span> <span class="text-[#e0af68]">~/portfolio</span> <span class="text-[#565f89]">on</span> <span class="text-[#f7768e]">main</span> <span class="command-text"></span><span class="cursor"></span>
						</div>
					</div>
				</div>

				<!-- Terminal Footer -->
				<div class="terminal-footer">
					<p class="text-xs text-[#7aa2f7]">Made with <span class="text-[#f7768e]">‚ù§</span> by DFanso</p>
				</div>

				<!-- Hidden Components -->
				<div id="components" class="hidden">
					<div id="welcome"><Welcome /></div>
					<div id="whoami"><Header /></div>
					<div id="about"><About /></div>
					<div id="projects"><Projects /></div>
					<div id="skills"><Skills /></div>
					<div id="experience"><Experience /></div>
					<div id="contact"><Contact /></div>
					<div id="ls">
						<div class="command-output">
							<div class="text-[#bb9af7] font-bold mb-2">Directory listing of ~/portfolio</div>
							<div class="space-y-1">
								<div class="flex items-center gap-2">
									<span class="text-[#565f89]">drwxr-xr-x</span>
									<span class="text-[#7aa2f7]">about/</span>
									<span class="text-[#565f89] ml-auto">professional summary</span>
								</div>
								<div class="flex items-center gap-2">
									<span class="text-[#565f89]">drwxr-xr-x</span>
									<span class="text-[#7aa2f7]">projects/</span>
									<span class="text-[#565f89] ml-auto">featured work</span>
								</div>
								<div class="flex items-center gap-2">
									<span class="text-[#565f89]">drwxr-xr-x</span>
									<span class="text-[#7aa2f7]">skills/</span>
									<span class="text-[#565f89] ml-auto">technical expertise</span>
								</div>
								<div class="flex items-center gap-2">
									<span class="text-[#565f89]">drwxr-xr-x</span>
									<span class="text-[#7aa2f7]">experience/</span>
									<span class="text-[#565f89] ml-auto">work history</span>
								</div>
								<div class="flex items-center gap-2">
									<span class="text-[#565f89]">drwxr-xr-x</span>
									<span class="text-[#7aa2f7]">contact/</span>
									<span class="text-[#565f89] ml-auto">social links</span>
								</div>
								<div class="flex items-center gap-2">
									<span class="text-[#565f89]">-rw-r--r--</span>
									<span class="text-[#e0af68]">welcome.txt</span>
									<span class="text-[#565f89] ml-auto">welcome message</span>
								</div>
								<div class="flex items-center gap-2">
									<span class="text-[#565f89]">-rw-r--r--</span>
									<span class="text-[#e0af68]">whoami.txt</span>
									<span class="text-[#565f89] ml-auto">profile info</span>
								</div>
							</div>
							<div class="text-[#565f89] text-xs mt-4">
								Use 'cd' to navigate or type the command directly (e.g., 'about', 'projects')
							</div>
						</div>
					</div>
					<div id="neofetch">
						<div class="command-output">
							<div class="flex gap-6">
								<pre class="text-[#7aa2f7]">
                   ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ
                ‚ñÑ‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñÑ
               ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà
              ‚ñÑ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñÑ
             ‚ñÄ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÄ</pre>
								<div class="space-y-1">
									<div class="flex gap-2">
										<span class="text-[#7aa2f7]">OS:</span>
										<span class="text-[#c0caf5]">Portfolio v1.0.0</span>
									</div>
									<div class="flex gap-2">
										<span class="text-[#7aa2f7]">Host:</span>
										<span class="text-[#c0caf5]">dfanso.dev</span>
									</div>
									<div class="flex gap-2">
										<span class="text-[#7aa2f7]">Kernel:</span>
										<span class="text-[#c0caf5]">DevOps 5.0.1</span>
									</div>
									<div class="flex gap-2">
										<span class="text-[#7aa2f7]">Uptime:</span>
										<span class="text-[#c0caf5]">24/7</span>
									</div>
									<div class="flex gap-2">
										<span class="text-[#7aa2f7]">Shell:</span>
										<span class="text-[#c0caf5]">Portfolio-CLI</span>
									</div>
									<div class="flex gap-2">
										<span class="text-[#7aa2f7]">IDE:</span>
										<span class="text-[#c0caf5]">VS Code / Neovim</span>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div id="time">
						<div class="command-output">
							<div class="text-[#9ece6a]" id="current-time"></div>
						</div>
					</div>
					<div id="weather">
						<div class="command-output">
							<div class="text-[#7aa2f7]">Weather information is not available in the terminal.</div>
							<div class="text-[#565f89]">Try looking outside your window! üå§Ô∏è</div>
						</div>
					</div>
					<div id="matrix">
						<div class="command-output matrix-animation">
							<pre class="text-[#9ece6a]">
Digital rain simulation...
‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà
 ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà
‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà
 ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà</pre>
						</div>
					</div>
					<div id="ping">
						<div class="command-output ping-animation">
							<div class="text-[#bb9af7] font-bold mb-2">PING dfanso.dev (192.168.1.1)</div>
							<div class="space-y-1 font-mono">
								<div class="ping-line">
									<span class="text-[#7aa2f7]">64 bytes from dfanso.dev</span>
									<span class="text-[#565f89]">: icmp_seq=1 ttl=64 time=</span>
									<span class="text-[#9ece6a]">0.045 ms</span>
								</div>
								<div class="ping-line">
									<span class="text-[#7aa2f7]">64 bytes from dfanso.dev</span>
									<span class="text-[#565f89]">: icmp_seq=2 ttl=64 time=</span>
									<span class="text-[#9ece6a]">0.038 ms</span>
								</div>
								<div class="ping-line">
									<span class="text-[#7aa2f7]">64 bytes from dfanso.dev</span>
									<span class="text-[#565f89]">: icmp_seq=3 ttl=64 time=</span>
									<span class="text-[#9ece6a]">0.042 ms</span>
								</div>
								<div class="ping-line">
									<span class="text-[#7aa2f7]">64 bytes from dfanso.dev</span>
									<span class="text-[#565f89]">: icmp_seq=4 ttl=64 time=</span>
									<span class="text-[#9ece6a]">0.039 ms</span>
								</div>
							</div>
							<div class="mt-4 text-[#c0caf5]">
								<span class="text-[#565f89]">---</span> dfanso.dev ping statistics <span class="text-[#565f89]">---</span><br>
								4 packets transmitted, 4 received, 0% packet loss, time 3ms<br>
								rtt min/avg/max = 0.038/0.041/0.045 ms
							</div>
						</div>
					</div>
					<div id="help">
						<div class="command-list">
							<p class="text-[#bb9af7] font-bold mb-4">Terminal Portfolio Help</p>
							<div class="mb-4">
								<p class="text-[#7aa2f7] mb-2">USAGE:</p>
								<p class="text-[#c0caf5] ml-4">command [arguments]</p>
							</div>
							<div class="mb-4">
								<p class="text-[#7aa2f7] mb-2">AVAILABLE COMMANDS:</p>
								<ul class="command-help-list">
									<li>
										<div class="command-name">ls</div>
										<div class="command-desc">List available sections and commands</div>
									</li>
									<li>
										<div class="command-name">welcome</div>
										<div class="command-desc">Display welcome message and ASCII art</div>
									</li>
									<li>
										<div class="command-name">whoami</div>
										<div class="command-desc">Show detailed profile information</div>
									</li>
									<li>
										<div class="command-name">about</div>
										<div class="command-desc">View my professional summary</div>
									</li>
									<li>
										<div class="command-name">projects</div>
										<div class="command-desc">Browse my featured projects</div>
									</li>
									<li>
										<div class="command-name">skills</div>
										<div class="command-desc">List technical skills and expertise</div>
									</li>
									<li>
										<div class="command-name">experience</div>
										<div class="command-desc">View work history and roles</div>
									</li>
									<li>
										<div class="command-name">contact</div>
										<div class="command-desc">Get my contact information</div>
									</li>
									<li>
										<div class="command-name">clear</div>
										<div class="command-desc">Clear terminal screen</div>
									</li>
									<li>
										<div class="command-name">help</div>
										<div class="command-desc">Show this help message</div>
									</li>
									<li>
										<div class="command-name">neofetch</div>
										<div class="command-desc">Display system information</div>
									</li>
									<li>
										<div class="command-name">time</div>
										<div class="command-desc">Show current time</div>
									</li>
									<li>
										<div class="command-name">weather</div>
										<div class="command-desc">Check the weather (sort of)</div>
									</li>
									<li>
										<div class="command-name">matrix</div>
										<div class="command-desc">Display the matrix animation</div>
									</li>
									<li>
										<div class="command-name">ping</div>
										<div class="command-desc">Test connection to dfanso.dev</div>
									</li>
								</ul>
							</div>
							<div class="text-[#565f89] text-xs mt-6">
								<p>Use arrow keys ‚Üë‚Üì to navigate command history</p>
								<p>Press Ctrl+L or type 'clear' to clear screen</p>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</Layout>

<script>
	class Terminal {
		private terminal: HTMLElement;
		private outputContainer: HTMLElement;
		private inputLine: HTMLElement;
		private currentInput: string = '';
		private commandHistory: string[] = [];
		private historyIndex: number = -1;
		private awaitingProjectResponse: boolean = false;

		constructor() {
			this.terminal = document.getElementById('terminal') as HTMLElement;
			this.outputContainer = document.getElementById('output-container') as HTMLElement;
			this.inputLine = document.getElementById('input-line') as HTMLElement;
			this.initializeTerminal();
			this.initializeClipboard();
		}

		private initializeTerminal(): void {
			document.addEventListener('click', () => this.focusInput());
			document.addEventListener('keydown', (e: KeyboardEvent) => {
				// Handle Ctrl+C and Ctrl+V first
				if (e.ctrlKey || e.metaKey) {
					if (e.key === 'c') {
						if (window.getSelection()?.toString()) {
							this.handleCopy(e);
							return;
						}
					} else if (e.key === 'v') {
						this.handlePaste(e);
						return;
					} else if (e.key === 'l') {
						this.outputContainer.innerHTML = '';
						e.preventDefault();
						return;
					}
				}

				// Then handle other keyboard inputs
				if (e.key === 'Enter') {
					this.handleEnter();
				} else if (e.key === 'Backspace') {
					this.handleBackspace();
				} else if (e.key === 'ArrowUp') {
					this.handleArrowUp();
					e.preventDefault();
				} else if (e.key === 'ArrowDown') {
					this.handleArrowDown();
					e.preventDefault();
				} else if (e.key.length === 1 && !e.ctrlKey && !e.metaKey && !e.altKey) {
					this.handleInput(e.key);
				}
			});
		}

		private initializeClipboard(): void {
			// Add copy button to command outputs only
			this.terminal.addEventListener('mouseup', () => {
				const selection = window.getSelection()?.toString();
				if (selection) {
					this.showCopyButton(selection);
				} else {
					this.hideCopyButton();
				}
			});
		}

		private handleCopy(e: KeyboardEvent): void {
			const selection = window.getSelection()?.toString();
			if (selection) {
				e.preventDefault();
				navigator.clipboard.writeText(selection).then(() => {
					this.showCopyFeedback();
				});
			}
		}

		private handlePaste(e: KeyboardEvent): void {
			e.preventDefault();
			navigator.clipboard.readText().then((text) => {
				// Filter out any non-printable characters
				const cleanText = text.replace(/[^\x20-\x7E]/g, '');
				this.currentInput += cleanText;
				this.updateInputLine();
			});
		}

		private showCopyButton(text: string): void {
			let copyButton = document.getElementById('copy-button');
			if (!copyButton) {
				copyButton = document.createElement('button');
				copyButton.id = 'copy-button';
				copyButton.className = 'copy-button';
				copyButton.innerHTML = 'üìã';
				document.body.appendChild(copyButton);

				copyButton.addEventListener('click', () => {
					navigator.clipboard.writeText(text).then(() => {
						this.showCopyFeedback();
					});
				});
			}

			const selection = window.getSelection();
			if (selection && selection.rangeCount > 0) {
				const range = selection.getRangeAt(0);
				const rect = range.getBoundingClientRect();
				copyButton.style.top = `${rect.top - 30}px`;
				copyButton.style.left = `${rect.right}px`;
				copyButton.style.display = 'block';
			}
		}

		private hideCopyButton(): void {
			const copyButton = document.getElementById('copy-button');
			if (copyButton) {
				copyButton.style.display = 'none';
			}
		}

		private showCopyFeedback(): void {
			const feedback = document.createElement('div');
			feedback.className = 'copy-feedback';
			feedback.textContent = 'Copied! üìã';
			document.body.appendChild(feedback);

			setTimeout(() => {
				feedback.remove();
			}, 1500);
		}

		private handleEnter(): void {
			const command = this.currentInput.trim().toLowerCase();
			
			// Clone current input line without cursor
			const inputClone = this.inputLine.cloneNode(true) as HTMLElement;
			inputClone.removeAttribute('id');
			const commandText = inputClone.querySelector('.command-text');
			if (commandText) {
				commandText.textContent = this.currentInput;
			}
			const cursor = inputClone.querySelector('.cursor');
			if (cursor) {
				cursor.remove();
			}

			// Add command output
			const outputDiv = document.createElement('div');
			outputDiv.className = 'command-output';
			inputClone.appendChild(outputDiv);

			if (!command) {
				// Handle empty input with random messages
				const emptyMessages = [
					"ü§î Hmm... trying to say something?",
					"üí≠ The silence is deafening...",
					"‚å®Ô∏è The keyboard is waiting for your command!",
					"‚ú® Type 'help' if you're not sure what to do",
					"üåü Press some keys, then press Enter!",
					"üéØ Almost there! Just need to type a command first",
					"üöÄ Ready for your input, commander!"
				];
				const randomMessage = emptyMessages[Math.floor(Math.random() * emptyMessages.length)];
				outputDiv.innerHTML = `<div class="text-[#bb9af7]">${randomMessage}</div>`;
				this.outputContainer.appendChild(inputClone);
			} else {
				// Add to history only if command is not empty
				this.commandHistory.push(command);
				this.historyIndex = this.commandHistory.length;

				// Execute command
				this.executeCommand(command, outputDiv);

				// Add to output container
				this.outputContainer.appendChild(inputClone);
			}

			// Reset input
			this.currentInput = '';
			this.updateInputLine();
			this.terminal.scrollTop = this.terminal.scrollHeight;
		}

		private executeCommand(command: string, outputDiv: HTMLElement): void {
			if (command === 'clear') {
				this.outputContainer.innerHTML = '';
				return;
			}

			const componentId = command === 'whoami' ? 'whoami' : command;
			const component = document.getElementById(componentId);

			if (component) {
				outputDiv.innerHTML = component.innerHTML;
				
				// Add interactive project prompt if it's the projects command
				if (command === 'projects') {
					const promptDiv = document.createElement('div');
					promptDiv.className = 'mt-4 text-[#9ece6a] command-prompt';
					promptDiv.innerHTML = '<span class="text-[#9ece6a]">‚ùØ</span> Would you like to see more projects? (y/n)';
					outputDiv.appendChild(promptDiv);
					
					// Set a flag to handle the next input differently
					this.awaitingProjectResponse = true;
				}
			} else if (this.awaitingProjectResponse) {
				const response = command.toLowerCase();
				if (response === 'y' || response === 'Y') {
					outputDiv.innerHTML = `<div class="text-[#9ece6a] command-output">
						<p class="mb-2">üîó Check out more of my projects:</p>
						<a href="https://github.com/dfanso" target="_blank" class="text-[#7aa2f7] hover:text-[#9ece6a] transition-colors">
							<span class="text-[#565f89]">‚îî‚îÄ‚ñ∂</span> Visit my GitHub Profile
						</a>
					</div>`;
				} else if (response === 'n' || response === 'N') {
					outputDiv.innerHTML = '<div class="text-[#9ece6a] command-output"><span class="text-[#565f89]">‚îî‚îÄ‚ñ∂</span> Alright! Feel free to explore other commands using `help`.</div>';
				} else {
					outputDiv.innerHTML = '<div class="text-[#f7768e] command-output"><span class="text-[#565f89]">‚îî‚îÄ‚ñ∂</span> Please answer with yes or no.</div>';
					this.awaitingProjectResponse = true;
					return;
				}
				this.awaitingProjectResponse = false;
			} else {
				outputDiv.innerHTML = `<div class="text-[#f7768e] command-output"><span class="text-[#565f89]">‚îî‚îÄ‚ñ∂</span> Command not found: ${command}</div>`;
			}
		}

		private handleBackspace(): void {
			if (this.currentInput.length > 0) {
				this.currentInput = this.currentInput.slice(0, -1);
				this.updateInputLine();
			}
		}

		private handleArrowUp(): void {
			if (this.historyIndex > 0) {
				this.historyIndex--;
				this.currentInput = this.commandHistory[this.historyIndex];
				this.updateInputLine();
			}
		}

		private handleArrowDown(): void {
			if (this.historyIndex < this.commandHistory.length - 1) {
				this.historyIndex++;
				this.currentInput = this.commandHistory[this.historyIndex];
			} else {
				this.historyIndex = this.commandHistory.length;
				this.currentInput = '';
			}
			this.updateInputLine();
		}

		private handleInput(key: string): void {
			this.currentInput += key;
			this.updateInputLine();
		}

		private updateInputLine(): void {
			const commandText = this.inputLine.querySelector('.command-text');
			if (commandText) {
				commandText.textContent = this.currentInput;
			}
		}

		private focusInput(): void {
			// Just ensure cursor is visible
			const cursor = this.inputLine.querySelector('.cursor');
			if (!cursor) {
				const newCursor = document.createElement('span');
				newCursor.className = 'cursor';
				const commandText = this.inputLine.querySelector('.command-text');
				if (commandText) {
					commandText.parentNode?.insertBefore(newCursor, commandText.nextSibling);
				}
			}
		}
	}

	// Initialize terminal when the page loads
	window.addEventListener('load', () => {
		new Terminal();
	});

	// Add time update functionality
	function updateTime() {
		const timeDiv = document.getElementById('current-time');
		if (timeDiv) {
			const now = new Date();
			timeDiv.textContent = now.toLocaleTimeString();
		}
	}

	setInterval(updateTime, 1000);
	updateTime();
</script>

<style>
	.terminal-container {
		@apply bg-[#1a1b26];
		font-family: 'Fira Code', monospace;
		height: 90vh;
		box-shadow: 0 0 20px rgba(0, 0, 0, 0.4),
					0 0 60px rgba(122, 162, 247, 0.1);
	}

	.terminal-title-bar {
		@apply flex items-center bg-[#1a1b26] border-b border-[#7aa2f7]/20 p-1;
		background: #1a1b26;
	}

	.terminal-buttons {
		@apply flex gap-1.5 mr-3;
	}

	.terminal-button {
		@apply w-2.5 h-2.5 rounded-full opacity-70 hover:opacity-100;
	}

	.terminal-title {
		@apply text-[#7aa2f7] text-xs opacity-80;
	}

	.terminal-content-area {
		@apply p-2 overflow-auto space-y-2;
		height: calc(90vh - 6rem);
		background: #1a1b26;
		font-family: 'Fira Code', monospace;
	}

	.command-block {
		@apply mb-2;
	}

	.command-prompt {
		@apply text-[#7aa2f7] mb-1 flex items-center gap-1.5 flex-wrap text-sm;
		font-family: 'Fira Code', monospace;
	}

	.command-output {
		@apply pl-6 py-2 text-sm opacity-90;
		border-left: 2px solid rgba(86, 95, 137, 0.3);
		margin-left: 0.5rem;
	}

	.cursor {
		@apply ml-[1px] -mr-[1px] opacity-70;
	}

	.cursor::after {
		content: "‚ñã";
		animation: cursor-blink 0.8s step-end infinite;
	}

	@keyframes cursor-blink {
		0%, 100% { opacity: 1; }
		50% { opacity: 0; }
	}

	/* Custom Scrollbar - More minimal */
	.terminal-content-area {
		scrollbar-width: thin;
		scrollbar-color: rgba(122, 162, 247, 0.3) transparent;
	}

	.terminal-content-area::-webkit-scrollbar {
		width: 2px;
	}

	.terminal-content-area::-webkit-scrollbar-thumb {
		background-color: rgba(122, 162, 247, 0.3);
	}

	.command-list {
		@apply text-sm p-4 rounded;
		background: rgba(26, 27, 38, 0.6);
		border: 1px solid rgba(86, 95, 137, 0.2);
	}

	.command-list p {
		@apply text-[#7aa2f7] mb-2;
	}

	.command-list ul li {
		@apply flex items-center gap-2;
	}

	.command-list ul li span {
		@apply text-[#9ece6a] font-mono;
	}

	/* Update help command styling */
	#help .command-list ul li::before {
		content: "‚îî‚îÄ‚ñ∂";
		@apply text-[#565f89] mr-2;
	}

	.terminal-footer {
		@apply fixed bottom-2 right-2 text-center opacity-50 hover:opacity-80 transition-opacity;
		font-family: 'Fira Code', monospace;
	}

	/* Mobile-specific styles */
	@media (max-width: 640px) {
		.mobile-section {
			@apply bg-[#1a1b26] rounded-lg p-4;
			border: 1px solid rgba(122, 162, 247, 0.1);
		}

		.mobile-section h2 {
			@apply mb-4;
		}

		/* Adjust command output for mobile */
		.command-output {
			@apply pl-4;
			border-left: 1px solid rgba(86, 95, 137, 0.3);
		}

		/* Make links more touchable */
		a {
			@apply py-2;
		}

		/* Improve mobile scrolling */
		body {
			@apply overflow-hidden;
		}

		.block.sm\:hidden {
			height: 100vh;
			overflow-y: auto;
			-webkit-overflow-scrolling: touch;
		}

		/* Section spacing */
		.space-y-8 > * {
			@apply mb-8;
		}

		/* Mobile footer */
		.fixed.bottom-0 {
			@apply text-center shadow-lg z-50;
			background: rgba(26, 27, 38, 0.95);
			backdrop-filter: blur(8px);
			position: fixed;
			bottom: 0;
			left: 0;
			right: 0;
			padding: 0.75rem;
		}

		/* Ensure content doesn't hide behind footer */
		.p-4.pb-20 {
			padding-bottom: 5rem;
		}
	}

	/* Remove fancy background effects */
	.terminal-container {
		background-image: none !important;
	}

	/* Adjust text colors for more terminal-like appearance */
	.text-[#c0caf5] {
		@apply opacity-90;
	}

	.welcome-text {
		@apply opacity-80;
	}

	/* Make the ASCII art more terminal-like */
	.ascii-art {
		@apply opacity-70;
	}

	.command-help-list {
		@apply space-y-2 ml-4;
	}

	.command-help-list li {
		@apply flex items-start gap-4;
	}

	.command-name {
		@apply text-[#9ece6a] w-24 font-mono;
	}

	.command-desc {
		@apply text-[#c0caf5] opacity-80;
	}

	/* Matrix animation */
	.matrix-animation pre {
		animation: matrix 2s infinite;
		font-family: 'Fira Code', monospace;
	}

	@keyframes matrix {
		0%, 100% { opacity: 1; }
		50% { opacity: 0.7; }
	}

	/* Ping animation */
	.ping-animation .ping-line {
		animation: fade-in 0.3s ease-out forwards;
		opacity: 0;
	}

	.ping-animation .ping-line:nth-child(1) { animation-delay: 0s; }
	.ping-animation .ping-line:nth-child(2) { animation-delay: 0.5s; }
	.ping-animation .ping-line:nth-child(3) { animation-delay: 1s; }
	.ping-animation .ping-line:nth-child(4) { animation-delay: 1.5s; }

	@keyframes fade-in {
		from {
			opacity: 0;
			transform: translateY(-4px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	/* Copy/Paste Styles */
	.copy-button {
		@apply fixed bg-[#1a1b26] text-[#7aa2f7] px-2 py-1 rounded cursor-pointer z-50 
			   border border-[#7aa2f7]/20 hover:bg-[#7aa2f7]/10 transition-colors;
		display: none;
	}

	.copy-feedback {
		@apply fixed top-4 right-4 bg-[#9ece6a] text-[#1a1b26] px-4 py-2 rounded shadow-lg z-50;
		animation: fadeInOut 1.5s ease-in-out forwards;
	}

	@keyframes fadeInOut {
		0% { opacity: 0; transform: translateY(-20px); }
		10% { opacity: 1; transform: translateY(0); }
		90% { opacity: 1; transform: translateY(0); }
		100% { opacity: 0; transform: translateY(-20px); }
	}

	/* Selection style */
	::selection {
		@apply bg-[#7aa2f7]/30 text-[#c0caf5];
	}
</style>
