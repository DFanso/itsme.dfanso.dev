---
const { class: className } = Astro.props;

// Import data from other components
const personalInfo = {
    name: "Leo Felcianas",
    title: "Associate DevOps Engineer at Empite",
    email: "leogavin123@outlook.com",
    summary: "DevOps/Backend specialist crafting efficient and scalable solutions. \nTransforming complex challenges into elegant architectures."
};

// From Skills.astro
const skillCategories = [
    {
        name: 'cloud',
        skills: [
            { icon: '⠿', name: 'AWS' },
            { icon: '⚡', name: 'Azure' },
            { icon: '☁', name: 'Cloudflare' }
        ]
    },
    {
        name: 'containers',
        skills: [
            { icon: '🐳', name: 'Docker' },
            { icon: '☸', name: 'Kubernetes' }
        ]
    },
    {
        name: 'infra',
        skills: [
            { icon: '⚙', name: 'Terraform' },
            { icon: '⚡', name: 'Jenkins' },
            { icon: '⭐', name: 'GitHub-Actions' }
        ]
    },
    {
        name: 'lang',
        skills: [
            { icon: '⚡', name: 'Go' },
            { icon: '🐍', name: 'Python' },
            { icon: '⚛', name: 'TypeScript' },
            { icon: '⬡', name: 'Node.js' }
        ]
    },
    {
        name: 'db',
        skills: [
            { icon: '🐘', name: 'PostgreSQL' },
            { icon: '🍃', name: 'MongoDB' },
            { icon: '⚡', name: 'Redis' }
        ]
    },
    {
        name: 'monitor',
        skills: [
            { icon: '📊', name: 'Prometheus' },
            { icon: '📈', name: 'Grafana' },
            { icon: '🔍', name: 'ELK' }
        ]
    },
    {
        name: 'arch',
        skills: [
            { icon: '⚡', name: 'Microservices' },
            { icon: '⚙', name: 'System' },
            { icon: '🔒', name: 'Network' }
        ]
    }
];

// From Experience.astro
const experiences = [
    {
        type: 'DEV',
        file: 'empite.md',
        title: 'Associate DevOps Engineer',
        company: 'Empite',
        period: 'November 2024 - Present',
        responsibilities: [
            'Building and maintaining CI/CD pipelines using Azure DevOps',
            'Developing backend services using NestJS and TypeScript',
            'Infrastructure as Code (IaC) implementation with Terraform',
            'Container orchestration with Docker and Kubernetes'
        ]
    },
    {
        type: 'INT',
        file: 'intern.md',
        title: 'Software Engineer Intern',
        company: 'Empite',
        period: 'July 2024 - October 2024',
        responsibilities: [
            'Developed web applications using modern frameworks',
            'Collaborated with senior developers on project implementations',
            'Participated in code reviews and agile development processes'
        ]
    },
    {
        type: 'FRL',
        file: 'freelance.md',
        title: 'Software Engineer',
        company: 'Freelance',
        period: 'May 2023 - Present',
        responsibilities: [
            'Developing custom web and mobile applications for clients',
            'Implementing full-stack solutions with modern technologies',
            'Managing client relationships and project deliverables'
        ]
    }
];

// From Projects.astro
const projects = [
    {
        type: 'WEB',
        name: 'Techxeed',
        description: 'A comprehensive digital solutions platform offering web development, \nmobile apps, AI solutions, and digital marketing services.',
        tech: [
            { icon: '⚛', name: 'Next.js' },
            { icon: '⬡', name: 'Nest.js' },
            { icon: '🍃', name: 'MongoDB' },
            { icon: '🎨', name: 'TailwindCSS' },
            { icon: '🔥', name: 'Firebase' },
            { icon: '⠿', name: 'AWS' }
        ]
    },
    {
        type: 'APP',
        name: 'QuickQuest',
        description: 'A location-based platform connecting customers with laborers, \nfeaturing real-time chat via SSE and geospatial queries.',
        tech: [
            { icon: '⚛', name: 'Next.js' },
            { icon: '⬡', name: 'Nest.js' },
            { icon: '🍃', name: 'MongoDB' },
            { icon: '🐍', name: 'Python' },
            { icon: '⠿', name: 'AWS' }
        ]
    },
    {
        type: 'SYS',
        name: 'CineMagic',
        description: 'A comprehensive cinema ticket booking system with \nreal-time seat selection and secure payments.',
        tech: [
            { icon: '⚛', name: 'React.js' },
            { icon: '⚡', name: 'Redux' },
            { icon: '⬡', name: 'Nest.js' },
            { icon: '🍃', name: 'MongoDB' }
        ]
    }
];

function truncateText(text: string, maxLength: number) {
    return text.length > maxLength ? text.substring(0, maxLength - 3) + '...' : text;
}

function generateCVContent() {
    const sections = [
        { 
            title: "LEO FELCIANAS",
            isHeader: true,
            content: `${personalInfo.title}\n${personalInfo.email}`
        },
        { 
            title: "PROFESSIONAL SUMMARY",
            content: truncateText(personalInfo.summary, 150)
        },
        { 
            title: "TECHNICAL SKILLS",
            content: skillCategories.map(category => 
                `${category.name.toUpperCase()}: ${category.skills.map(skill => skill.name).join(" | ")}`
            ).join("\n")
        },
        { 
            title: "PROFESSIONAL EXPERIENCE",
            content: experiences.map(job => 
                `${job.title} - ${job.company} (${job.period})\n${job.responsibilities.slice(0, 3).map(r => `• ${truncateText(r, 80)}`).join("\n")}`
            ).join("\n\n")
        },
        { 
            title: "KEY PROJECTS",
            content: projects.map(project => 
                `${project.name}: ${truncateText(project.description, 100)}\nStack: ${project.tech.map(t => t.name).join(" | ")}`
            ).join("\n\n")
        },
        { 
            title: "EDUCATION",
            content: "Bachelor of Science (Honours) in Software Engineering\nUniversity of Plymouth"
        }
    ];

    return sections;
}

const cvSections = generateCVContent();
---

<div class:list={["mt-4", className]}>
    <button
        id="downloadCV"
        class="flex items-center gap-2 px-4 py-2 bg-[#7aa2f7] text-[#1a1b26] rounded hover:bg-[#9ece6a] transition-colors"
        data-sections={cvSections.map(section => `${section.title}:::${section.content}:::${section.isHeader || false}`).join('|||')}
    >
        <span class="command-prompt">$</span> download-cv
    </button>
</div>

<script>
    import { jsPDF } from 'jspdf';

    const downloadButton = document.getElementById('downloadCV');
    if (!downloadButton) throw new Error('Download button not found');

    downloadButton.addEventListener('click', () => {
        const sectionsData = downloadButton.getAttribute('data-sections');
        if (!sectionsData) throw new Error('CV sections data not found');

        const doc = new jsPDF();
        const sections = sectionsData.split('|||');
        
        let y = 15;
        const margin = 15;
        const lineHeight = 6;
        
        sections.forEach(section => {
            const [title, content, isHeader] = section.split(':::');
            
            if (isHeader === 'true') {
                // Header formatting
                doc.setFont('helvetica', 'bold');
                doc.setFontSize(14);
                doc.text(title, margin, y);
                y += lineHeight;
                
                doc.setFontSize(10);
                const lines = content.split('\n');
                lines.forEach(line => {
                    doc.text(line, margin, y);
                    y += lineHeight;
                });
            } else {
                // Section title
                doc.setFont('helvetica', 'bold');
                doc.setFontSize(11);
                doc.text(title, margin, y);
                y += lineHeight;
                
                // Section content
                doc.setFont('helvetica', 'normal');
                doc.setFontSize(10);
                
                const lines = content.split('\n');
                lines.forEach(line => {
                    // Handle bullet points with proper indentation
                    if (line.startsWith('•')) {
                        doc.text(line, margin + 4, y);
                    } else {
                        doc.text(line, margin, y);
                    }
                    y += lineHeight;
                });
                
                y += lineHeight * 0.5; // Reduced space between sections
            }
        });
        
        doc.save('Leo_Felcianas_CV.pdf');
    });
</script>

<style>
    button {
        font-family: monospace;
        font-size: 0.875rem;
        font-weight: 500;
    }
</style> 